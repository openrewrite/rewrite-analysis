# Copyright 2025 the original author or authors.
# <p>
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# <p>
# https://www.apache.org/licenses/LICENSE-2.0
# <p>
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.analysis.controlflow.ControlFlowVisualization
examples:
- description: '`ControlFlowTest#displayControlFlowGraphForSingleBasicBlock`'
  parameters:
  - 'false'
  - 'true'
  sources:
  - before: |
      abstract class Test {
          abstract int start();
          void test() {
              int x = start();
              x++;
          }
      }
    after: |
      abstract class Test {
          abstract int start();
          void test() /*~~(BB: 1 CN: 0 EX: 1 | 1L)~~>*/{
              int x = start();
              x++;
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.analysis.dataflow.global.MockGlobalDataFlowRecipe
examples:
- description: '`GlobalDataFlowTest#identityFunction`'
  parameters:
  - DATA_FLOW_SPEC
  sources:
  - before: |
      class Test {

          String identity(String s) {
              return s;
          }

          void test() {
              String s = "42";
              String t = identity(s);
              System.out.println(t);
          }
      }
    after: |
      class Test {

          String identity(String /*~~>*/s) {
              return /*~~>*/s;
          }

          void test() {
              String s = /*~~(source)~~>*/"42";
              String t = /*~~>*/identity(/*~~>*/s);
              System.out.println(/*~~(sink)~~>*/t);
          }
      }
    language: java
- description: '`GlobalTaintFlowTest#normalTaintFlowStillWorks`'
  parameters:
  - TAINT_FLOW_SPEC
  sources:
  - before: |
      class Test {
          void test() {
              String s = "42";
              String t = s.substring(1);
              System.out.println(t);
          }
      }
    after: |
      class Test {
          void test() {
              String s = /*~~(source)~~>*/"42";
              String t = /*~~>*//*~~>*/s.substring(1);
              System.out.println(/*~~(sink)~~>*/t);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.analysis.search.FindFlowBetweenMethods
examples:
- description: '`FindFlowBetweenMethodsTest#taintFlowBetweenSubjectOnly`'
  parameters:
  - java.util.LinkedList <constructor>()
  - 'true'
  - java.util.LinkedList remove()
  - 'true'
  - Select
  - Taint
  sources:
  - before: |
      import java.util.LinkedList;
      class Test {
          void test() {
              LinkedList<Integer> l = new LinkedList<>();
              l.add(5);
              System.out.println(l);
              l.remove();
          }
      }
    after: |
      import java.util.LinkedList;
      class Test {
          void test() {
              LinkedList<Integer> l = /*~~(source)~~>*/new LinkedList<>();
              /*~~>*/l.add(5);
              System.out.println(/*~~>*/l);
              /*~~(sink)~~>*/l.remove();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.analysis.search.FindMethods
examples:
- description: '`FindMethodsTest#findConstructors`'
  parameters:
  - A <constructor>(String)
  - 'false'
  - 'null'
  sources:
  - before: |
      class A {
          public A(String s) {}
      }
    language: java
  - before: |
      class Test {
          A a = new A("test");
      }
    after: |
      class Test {
          A a = /*~~>*/new A("test");
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.analysis.search.UriCreatedWithHttpScheme
examples:
- description: '`UriCreatedWithHttpSchemeTest#findInsecureUri`'
  sources:
  - before: |
      import java.net.URI;
      class Test {
          void test() {
              String s = "http://test";
              String t = s;
              if(System.currentTimeMillis() > 0) {
                  System.out.println(URI.create(t));
              } else {
                  System.out.println(URI.create(t));
              }
          }
      }
    after: |
      import java.net.URI;
      class Test {
          void test() {
              String s = "https://test";
              String t = s;
              if(System.currentTimeMillis() > 0) {
                  System.out.println(URI.create(t));
              } else {
                  System.out.println(URI.create(t));
              }
          }
      }
    language: java
